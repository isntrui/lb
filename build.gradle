plugins {
    id "java"
    id("org.springframework.boot") version "3.3.4"
    id("io.spring.dependency-management") version "1.1.6"
    id("org.asciidoctor.jvm.convert") version "3.3.2"
    id 'org.jetbrains.kotlin.jvm'
    id "org.jetbrains.kotlin.plugin.jpa" version "2.1.0-Beta2"
    id("org.springdoc.openapi-gradle-plugin") version "1.9.0"
    id 'jacoco'
}

group = "ru.isntrui"
version = "0.0.1-SNAPSHOT"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

repositories {
    mavenCentral()
}

ext {
    set("snippetsDir", file("build/generated-snippets"))
}

dependencies {
    implementation("software.amazon.awssdk:s3:2.29.1")
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-mail")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.springframework.security:spring-security-test'
    compileOnly("org.projectlombok:lombok")
    runtimeOnly("io.micrometer:micrometer-registry-prometheus")
    runtimeOnly("org.postgresql:postgresql")
    annotationProcessor("org.projectlombok:lombok")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.boot:spring-boot-testcontainers")
    testImplementation("org.testcontainers:junit-jupiter")
    implementation 'io.github.guoshiqiufeng:loki:1.2.1'
    testImplementation 'org.testcontainers:testcontainers:1.19.0'
    testImplementation("org.testcontainers:postgresql")
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5' // or 'io.jsonwebtoken:jjwt-gson:0.11.5' if you prefer Gson    implementation('javax.xml.bind:jaxb-api:2.4.0-b180830.0359')
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation 'com.zaxxer:HikariCP'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

tasks.named("test") {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.named("asciidoctor") {
    inputs.dir snippetsDir
    dependsOn test
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn(test)
    reports {
        xml.required = true
        html.required = true
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}